// openapiClient.ts
import createClient, { type Middleware } from 'openapi-fetch'
import { localStorageKeys } from '@/modules/auth/api/authApi.types'
import type { paths } from '@/common/api/schema.ts'

const config = {
  baseURL: null as string | null,
  apiKey: null as string | null,
  accessTokenLocalStorageKey: localStorageKeys.accessToken,
  refreshTokenLocalStorageKey: localStorageKeys.refreshToken,
}

export const setClientConfig = (newConfig: Partial<typeof config>) => {
  Object.assign(config, newConfig)
  _client = undefined // –ø–µ—Ä–µ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
}

///////////////////////////////////////////////////////////////////////////////
// üîë  Middleware c –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏ refresh-–ª–æ–≥–∏–∫–æ–π                     //
///////////////////////////////////////////////////////////////////////////////
const authMiddleware = (() => {
  let isRefreshing = false
  let failedQueue: {
    resolve: (token: string) => void
    reject: (err: unknown) => void
  }[] = []

  const processQueue = (error: unknown, token?: string) => {
    failedQueue.forEach((p) => {
      if (token) p.resolve(token)
      else p.reject(error)
    })
    failedQueue = []
  }

  const mw: Middleware = {
    /* ---------- REQUEST -------------------------------------------------- */
    async onRequest({ request }) {
      // ‚Üí API-KEY
      request.headers.set('API-KEY', config.apiKey!)
      // ‚Üí Bearer access-token
      if (typeof localStorage !== 'undefined') {
        const token = localStorage.getItem(config.accessTokenLocalStorageKey)
        if (token) request.headers.set('Authorization', `Bearer ${token}`)
      }
      // ‚Üí Origin –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è SSR (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
      if (typeof window === 'undefined') {
        request.headers.set('Origin', 'http://localhost:3000')
      }
      return request
    },

    /* ---------- RESPONSE ------------------------------------------------- */
    async onResponse({ request, response }) {
      if (response.status !== 401) {
        if (response.status >= 400 && response.status < 600) {
          let details = ''
          try {
            // first attempt JSON, fall back to plain text
            details = await response.clone().json().then(JSON.stringify)
          } catch {
            details = await response.clone().text()
          }

          throw new Error(
            `${response.url}: ${response.status} ${response.statusText}` + (details ? ` ‚Äì ${details}` : ''),
          )
        }

        return response
      }
      if (request.url.indexOf('auth/refresh') > -1) return response

      // —É–∂–µ –±—ã–ª —Ä–µ—Ç—Ä–∞–π?
      // @ts-expect-error: add custom property _retry
      if (request._retry) return response
      // @ts-expect-error: add custom property _retry
      request._retry = true

      if (typeof localStorage === 'undefined') return response
      const refreshToken = localStorage.getItem(config.refreshTokenLocalStorageKey)
      if (!refreshToken) return response

      /* ===== –æ—á–µ—Ä–µ–¥—å, –ø–æ–∫–∞ –∏–¥—ë—Ç refresh ===== */
      if (isRefreshing) {
        return new Promise<Response>((resolve, reject) => {
          failedQueue.push({
            resolve: async (token: string) => {
              // –ø–æ–≤—Ç–æ—Ä—è–µ–º –ò–ú–ï–ù–ù–û –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
              const retry = new Request(request, {
                headers: new Headers(request.headers),
              })
              retry.headers.set('Authorization', `Bearer ${token}`)
              try {
                resolve(await fetch(retry))
              } catch (e) {
                reject(e)
              }
            },
            reject,
          })
        })
      }

      /* ===== –¥–µ–ª–∞–µ–º refresh ===== */
      isRefreshing = true
      try {
        const response = await getClient().POST('/auth/refresh', {
          body: {
            refreshToken: refreshToken,
          },
        })

        if (response.response.status === 201) {
          localStorage.setItem(config.accessTokenLocalStorageKey, response.data!.accessToken)
          localStorage.setItem(config.refreshTokenLocalStorageKey, response.data!.refreshToken)

          processQueue(null, response.data!.accessToken)

          // –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
          const retry = new Request(request, {
            headers: new Headers(request.headers),
          })
          retry.headers.set('Authorization', `Bearer ${response.data!.accessToken}`)

          return await fetch(retry)
        } else {
          throw new Error("Refresh is can't be processed")
        }
      } catch (err) {
        processQueue(err, undefined)
        localStorage.removeItem(config.accessTokenLocalStorageKey)
        localStorage.removeItem(config.refreshTokenLocalStorageKey)
        return response // –æ—Ç–¥–∞–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π 401
      } finally {
        isRefreshing = false
      }
    },

    /* ---------- NETWORK-–æ—à–∏–±–∫–∏ ------------------------------------------ */
    // onError({ error }) {
    //   // –ø—Ä–æ—Å—Ç–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º, –∫–∞–∫ —É –≤–∞—Å –≤ –ø—Ä–∏–º–µ—Ä–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    //   throw new Error("Oops, fetch failed")
    // },
  }

  return mw
})()

///////////////////////////////////////////////////////////////////////////////
// üîß  Singleton-–∫–ª–∏–µ–Ω—Ç (–∞–Ω–∞–ª–æ–≥ getInstance)                                 //
///////////////////////////////////////////////////////////////////////////////
let _client: ReturnType<typeof createClient<paths>> | undefined

export const getClient = () => {
  if (_client) return _client

  if (!config.baseURL || !config.apiKey) {
    console.error('call setClientConfig to setup api')
    throw new Error('call setClientConfig to setup api')
  }

  const client = createClient<paths>({ baseUrl: config.baseURL })
  client.use(authMiddleware)
  _client = client
  return _client
}

export const getApiConfig = () => ({ ...config })
